{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom transformers import AutoTokenizer, AutoModelForQuestionAnswering, Trainer, TrainingArguments\nfrom datasets import load_dataset\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T11:25:42.038994Z","iopub.execute_input":"2025-03-10T11:25:42.039213Z","iopub.status.idle":"2025-03-10T11:26:04.378173Z","shell.execute_reply.started":"2025-03-10T11:25:42.039193Z","shell.execute_reply":"2025-03-10T11:26:04.377494Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"dataset = load_dataset(\"squad_v2\")\ntrain_data = dataset[\"train\"].shuffle(seed=42).select(range(15000))\nval_data = dataset[\"validation\"].shuffle(seed=42).select(range(2000))\n\n# Load SpanBERT tokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"SpanBERT/spanbert-large-cased\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T11:26:16.548919Z","iopub.execute_input":"2025-03-10T11:26:16.549224Z","iopub.status.idle":"2025-03-10T11:26:22.537899Z","shell.execute_reply.started":"2025-03-10T11:26:16.549200Z","shell.execute_reply":"2025-03-10T11:26:22.536993Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/8.92k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e9325c327f4f4082b510ba0f5b467e0a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00000-of-00001.parquet:   0%|          | 0.00/16.4M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e39c03d610ae492aba785a2beb707539"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"validation-00000-of-00001.parquet:   0%|          | 0.00/1.35M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"110af3e5f71c481e950f28d9b567218a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split:   0%|          | 0/130319 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9c18e3f2d7d84762bfaf666916707e58"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating validation split:   0%|          | 0/11873 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"11df9c2e8162467aa9c2ddbd6293ca0e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/414 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b57ac0f075934e3d88fb7b02dff7b8b4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/213k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"67c33e318d3f465893ac90ce59005c43"}},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"def preprocess_data(batch):\n    inputs = tokenizer(batch[\"question\"], batch[\"context\"], truncation=True, padding=\"max_length\", max_length=384)\n\n    start_positions = []\n    end_positions = []\n\n    for answers in batch[\"answers\"]:\n        if answers and len(answers[\"text\"]) > 0:\n            start = answers[\"answer_start\"][0]\n            end = start + len(answers[\"text\"][0])\n        else:\n            start = 0\n            end = 0\n        start_positions.append(start)\n        end_positions.append(end)\n\n    inputs[\"start_positions\"] = start_positions\n    inputs[\"end_positions\"] = end_positions\n\n    return inputs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T11:32:37.201314Z","iopub.execute_input":"2025-03-10T11:32:37.201653Z","iopub.status.idle":"2025-03-10T11:32:37.207027Z","shell.execute_reply.started":"2025-03-10T11:32:37.201622Z","shell.execute_reply":"2025-03-10T11:32:37.205964Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train_dataset = train_data.map(preprocess_data, batched=True)\nval_dataset = val_data.map(preprocess_data, batched=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T11:32:41.222841Z","iopub.execute_input":"2025-03-10T11:32:41.223128Z","iopub.status.idle":"2025-03-10T11:32:49.347631Z","shell.execute_reply.started":"2025-03-10T11:32:41.223108Z","shell.execute_reply":"2025-03-10T11:32:49.346751Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/15000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"904aa18ae94648b7a29102080e730e57"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a3dd433f377d4cd4b760101203830044"}},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"from transformers import AutoTokenizer, AutoModelForQuestionAnswering, Trainer, TrainingArguments\n\n# Ensure CUDA usage by setting device automatically\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# Load SpanBERT model and tokenizer\nmodel = AutoModelForQuestionAnswering.from_pretrained(\"SpanBERT/spanbert-large-cased\").to(device)\n\n# Training Arguments (use GPU if available)\ntraining_args = TrainingArguments(\n    output_dir=\"./results\",\n    evaluation_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    per_device_train_batch_size=16,  # Increase batch size for faster training on GPU\n    per_device_eval_batch_size=16,   # Larger batch size accelerates evaluation\n    num_train_epochs=6,\n    weight_decay=0.01,\n    logging_dir=\"./logs\",\n    logging_steps=100,               # Log more frequently\n    save_total_limit=2,\n    report_to=\"tensorboard\",         # For better monitoring\n    fp16=True,                       # Enable mixed precision for faster training\n)\n\n# Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n    eval_dataset=val_dataset,\n    tokenizer=tokenizer\n)\n\n# Start Training\ntrainer.train()\n\n# Save model\nmodel.save_pretrained(\"./spanbert_qa_finetuned\")\ntokenizer.save_pretrained(\"./spanbert_qa_finetuned\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T14:11:54.179926Z","iopub.execute_input":"2025-03-10T14:11:54.180214Z","iopub.status.idle":"2025-03-10T17:21:03.781496Z","shell.execute_reply.started":"2025-03-10T14:11:54.180192Z","shell.execute_reply":"2025-03-10T17:21:03.780500Z"}},"outputs":[{"name":"stderr","text":"Some weights of BertForQuestionAnswering were not initialized from the model checkpoint at SpanBERT/spanbert-large-cased and are newly initialized: ['qa_outputs.bias', 'qa_outputs.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead\n  warnings.warn(\n<ipython-input-9-6005c2debc66>:26: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='5628' max='5628' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [5628/5628 3:09:01, Epoch 6/6]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>5.951900</td>\n      <td>5.949219</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>5.951200</td>\n      <td>5.949219</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>5.951400</td>\n      <td>5.949219</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>5.951900</td>\n      <td>5.949219</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>5.951000</td>\n      <td>5.949219</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>5.950200</td>\n      <td>5.949219</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"('./spanbert_qa_finetuned/tokenizer_config.json',\n './spanbert_qa_finetuned/special_tokens_map.json',\n './spanbert_qa_finetuned/vocab.txt',\n './spanbert_qa_finetuned/added_tokens.json',\n './spanbert_qa_finetuned/tokenizer.json')"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom transformers import AutoTokenizer, AutoModelForQuestionAnswering, DataCollatorWithPadding\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\nimport json\n\n# Ensure correct device\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# Load SpanBERT model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"./spanbert_qa_finetuned\")\nmodel = AutoModelForQuestionAnswering.from_pretrained(\"./spanbert_qa_finetuned\").to(device)\n\n# Data collator for dynamic padding\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n\n# Ensure dataset is properly tokenized\ndef preprocess_data(batch):\n    inputs = tokenizer(batch[\"question\"], batch[\"context\"], truncation=True, padding=\"max_length\", max_length=384)\n\n    start_positions = []\n    end_positions = []\n\n    for answers in batch[\"answers\"]:\n        if answers and len(answers[\"text\"]) > 0:\n            start = answers[\"answer_start\"][0]\n            end = start + len(answers[\"text\"][0])\n        else:\n            start = 0\n            end = 0\n        start_positions.append(start)\n        end_positions.append(end)\n\n    inputs[\"start_positions\"] = start_positions\n    inputs[\"end_positions\"] = end_positions\n\n    return inputs\n\n# Apply tokenization to validation dataset\ntokenized_val_dataset = val_data.map(preprocess_data, batched=True)\n\n# Ensure only relevant columns are passed to the model\ntokenized_val_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"start_positions\", \"end_positions\"])\n\n# Function to get predictions and references\ndef get_predictions(dataset):\n    dataloader = DataLoader(dataset, batch_size=8, collate_fn=data_collator)\n    model.eval()\n\n    predictions, references = [], []\n\n    for batch in tqdm(dataloader, desc=\"Evaluating\"):\n        with torch.no_grad():\n            inputs = {k: v.to(device) for k, v in batch.items() if k in [\"input_ids\", \"attention_mask\"]}\n            outputs = model(**inputs)\n            start_logits, end_logits = outputs.start_logits, outputs.end_logits\n\n            # Get most probable start and end positions\n            start_idx = torch.argmax(start_logits, dim=1).cpu().numpy()\n            end_idx = torch.argmax(end_logits, dim=1).cpu().numpy()\n\n            for i, (start, end) in enumerate(zip(start_idx, end_idx)):\n                # Decode prediction and store\n                pred_answer = tokenizer.decode(batch[\"input_ids\"][i][start:end + 1], skip_special_tokens=True)\n                predictions.append(pred_answer)\n\n                # Reference answer\n                true_answer = val_data[i][\"answers\"][\"text\"][0] if val_data[i][\"answers\"][\"text\"] else \"\"\n                references.append(true_answer)\n\n    return predictions, references\n\n# Calculate Exact Match (EM) score\ndef exact_match_score(predictions, references):\n    matches = sum(p.strip() == r.strip() for p, r in zip(predictions, references))\n    return matches / len(references) * 100\n\n# Evaluate the model\npreds, refs = get_predictions(tokenized_val_dataset)\nem_score = exact_match_score(preds, refs)\n\nprint(f\"Exact Match (EM) Score: {em_score:.2f}%\")\n\n# Plot loss curve from logs\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T18:18:42.641565Z","iopub.execute_input":"2025-03-10T18:18:42.641952Z","iopub.status.idle":"2025-03-10T18:19:57.058694Z","shell.execute_reply.started":"2025-03-10T18:18:42.641911Z","shell.execute_reply":"2025-03-10T18:19:57.057370Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4d35244d12ed4b86920af21186120283"}},"metadata":{}},{"name":"stderr","text":"Evaluating: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 250/250 [01:12<00:00,  3.44it/s]","output_type":"stream"},{"name":"stdout","text":"Exact Match (EM) Score: 35.30%\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-64f04ce62338>\u001b[0m in \u001b[0;36m<cell line: 111>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m \u001b[0;31m# Display loss curve\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 111\u001b[0;31m \u001b[0mplot_loss_curve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-23-64f04ce62338>\u001b[0m in \u001b[0;36mplot_loss_curve\u001b[0;34m(log_dir)\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0mtrain_losses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_losses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{log_dir}/trainer_state.json\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m         \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"log_history\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './logs/trainer_state.json'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: './logs/trainer_state.json'","output_type":"error"}],"execution_count":23},{"cell_type":"code","source":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport os\n\ndef plot_loss_curve_from_tfevents(log_dir=\"./logs\"):\n    train_losses = []\n    epochs = []\n\n    # Iterate through TensorBoard event files\n    for file in os.listdir(log_dir):\n        if \"events.out.tfevents\" in file:\n            event_file = os.path.join(log_dir, file)\n\n            for event in tf.compat.v1.train.summary_iterator(event_file):\n                for value in event.summary.value:\n                    if value.tag == \"train/loss\":  # Corrected tag\n                        train_losses.append(value.simple_value)\n                        epochs.append(len(train_losses))\n\n    if not train_losses:\n        print(\"No training losses found!\")\n        return\n\n    # Plotting the training loss curve\n    plt.plot(epochs, train_losses, label=\"Training Loss\")\n    plt.xlabel(\"Steps\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Training Loss Curve\")\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n# Display the loss curve\nplot_loss_curve_from_tfevents(\"/kaggle/working/logs\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T18:30:17.755616Z","iopub.execute_input":"2025-03-10T18:30:17.755966Z","iopub.status.idle":"2025-03-10T18:30:18.056598Z","shell.execute_reply.started":"2025-03-10T18:30:17.755939Z","shell.execute_reply":"2025-03-10T18:30:18.055787Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"import tensorflow as tf\nimport os\n\ndef inspect_tfevents(log_dir=\"./logs\"):\n    # Iterate through TensorBoard event files\n    for file in os.listdir(log_dir):\n        if \"events.out.tfevents\" in file:\n            event_file = os.path.join(log_dir, file)\n            print(f\"Inspecting: {event_file}\")\n\n            for event in tf.compat.v1.train.summary_iterator(event_file):\n                for value in event.summary.value:\n                    print(f\"Tag: {value.tag}, Value: {value.simple_value}\")\n\n# Inspect logs\ninspect_tfevents(\"/kaggle/working/logs\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T18:29:13.628485Z","iopub.execute_input":"2025-03-10T18:29:13.628856Z","iopub.status.idle":"2025-03-10T18:29:13.683852Z","shell.execute_reply.started":"2025-03-10T18:29:13.628828Z","shell.execute_reply":"2025-03-10T18:29:13.683195Z"}},"outputs":[{"name":"stdout","text":"Inspecting: /kaggle/working/logs/events.out.tfevents.1741606418.0a61df013961.31.0\nTag: args/text_summary, Value: 0.0\nTag: model_config/text_summary, Value: 0.0\nInspecting: /kaggle/working/logs/events.out.tfevents.1741615917.0a61df013961.31.1\nTag: args/text_summary, Value: 0.0\nTag: model_config/text_summary, Value: 0.0\nTag: train/loss, Value: 4.910399913787842\nTag: train/grad_norm, Value: 3.1807827949523926\nTag: train/learning_rate, Value: 4.9164889787789434e-05\nTag: train/epoch, Value: 0.10660980641841888\nTag: train/loss, Value: 5.952600002288818\nTag: train/grad_norm, Value: 0.5761380791664124\nTag: train/learning_rate, Value: 4.8276473535224795e-05\nTag: train/epoch, Value: 0.21321961283683777\nTag: train/loss, Value: 5.952400207519531\nTag: train/grad_norm, Value: 0.48687562346458435\nTag: train/learning_rate, Value: 4.7388060920638964e-05\nTag: train/epoch, Value: 0.31982943415641785\nTag: train/loss, Value: 5.9517998695373535\nTag: train/grad_norm, Value: 0.4408471882343292\nTag: train/learning_rate, Value: 4.6499644668074325e-05\nTag: train/epoch, Value: 0.42643922567367554\nTag: train/loss, Value: 5.952099800109863\nTag: train/grad_norm, Value: 0.40619394183158875\nTag: train/learning_rate, Value: 4.5611228415509686e-05\nTag: train/epoch, Value: 0.5330490469932556\nTag: train/loss, Value: 5.953499794006348\nTag: train/grad_norm, Value: 0.38986483216285706\nTag: train/learning_rate, Value: 4.4722815800923854e-05\nTag: train/epoch, Value: 0.6396588683128357\nTag: train/loss, Value: 5.951399803161621\nTag: train/grad_norm, Value: 0.46819332242012024\nTag: train/learning_rate, Value: 4.3834399548359215e-05\nTag: train/epoch, Value: 0.746268630027771\nTag: train/loss, Value: 5.950200080871582\nTag: train/grad_norm, Value: 0.38597601652145386\nTag: train/learning_rate, Value: 4.2945983295794576e-05\nTag: train/epoch, Value: 0.8528784513473511\nTag: train/loss, Value: 5.951900005340576\nTag: train/grad_norm, Value: 0.39638054370880127\nTag: train/learning_rate, Value: 4.2057570681208745e-05\nTag: train/epoch, Value: 0.9594882726669312\nTag: eval/loss, Value: 5.94921875\nTag: eval/runtime, Value: 77.0073013305664\nTag: eval/samples_per_second, Value: 25.972000122070312\nTag: eval/steps_per_second, Value: 1.6230000257492065\nTag: train/epoch, Value: 1.0\nTag: train/loss, Value: 5.952300071716309\nTag: train/grad_norm, Value: 0.5631987452507019\nTag: train/learning_rate, Value: 4.1169154428644106e-05\nTag: train/epoch, Value: 1.0660980939865112\nTag: train/loss, Value: 5.952199935913086\nTag: train/grad_norm, Value: 0.44743385910987854\nTag: train/learning_rate, Value: 4.028073817607947e-05\nTag: train/epoch, Value: 1.1727079153060913\nTag: train/loss, Value: 5.951200008392334\nTag: train/grad_norm, Value: 0.3907361328601837\nTag: train/learning_rate, Value: 3.9392325561493635e-05\nTag: train/epoch, Value: 1.2793177366256714\nTag: train/loss, Value: 5.952000141143799\nTag: train/grad_norm, Value: 0.401574045419693\nTag: train/learning_rate, Value: 3.8503909308928996e-05\nTag: train/epoch, Value: 1.3859275579452515\nTag: train/loss, Value: 5.95389986038208\nTag: train/grad_norm, Value: 0.3389319181442261\nTag: train/learning_rate, Value: 3.761549305636436e-05\nTag: train/epoch, Value: 1.492537260055542\nTag: train/loss, Value: 5.952700138092041\nTag: train/grad_norm, Value: 0.37579768896102905\nTag: train/learning_rate, Value: 3.6727080441778526e-05\nTag: train/epoch, Value: 1.599147081375122\nTag: train/loss, Value: 5.951900005340576\nTag: train/grad_norm, Value: 0.4356859028339386\nTag: train/learning_rate, Value: 3.583866418921389e-05\nTag: train/epoch, Value: 1.7057569026947021\nTag: train/loss, Value: 5.949900150299072\nTag: train/grad_norm, Value: 0.37591779232025146\nTag: train/learning_rate, Value: 3.495024793664925e-05\nTag: train/epoch, Value: 1.8123667240142822\nTag: train/loss, Value: 5.951200008392334\nTag: train/grad_norm, Value: 0.34434840083122253\nTag: train/learning_rate, Value: 3.4061835322063416e-05\nTag: train/epoch, Value: 1.9189765453338623\nTag: eval/loss, Value: 5.94921875\nTag: eval/runtime, Value: 77.40399932861328\nTag: eval/samples_per_second, Value: 25.83799934387207\nTag: eval/steps_per_second, Value: 1.6150000095367432\nTag: train/epoch, Value: 2.0\nTag: train/loss, Value: 5.9517998695373535\nTag: train/grad_norm, Value: 0.37333643436431885\nTag: train/learning_rate, Value: 3.317341906949878e-05\nTag: train/epoch, Value: 2.0255863666534424\nTag: train/loss, Value: 5.951499938964844\nTag: train/grad_norm, Value: 0.3912121057510376\nTag: train/learning_rate, Value: 3.228500281693414e-05\nTag: train/epoch, Value: 2.1321961879730225\nTag: train/loss, Value: 5.9506001472473145\nTag: train/grad_norm, Value: 0.3527510464191437\nTag: train/learning_rate, Value: 3.139659020234831e-05\nTag: train/epoch, Value: 2.2388060092926025\nTag: train/loss, Value: 5.952300071716309\nTag: train/grad_norm, Value: 0.4255184829235077\nTag: train/learning_rate, Value: 3.0508173949783668e-05\nTag: train/epoch, Value: 2.3454158306121826\nTag: train/loss, Value: 5.950300216674805\nTag: train/grad_norm, Value: 0.3852511942386627\nTag: train/learning_rate, Value: 2.961975769721903e-05\nTag: train/epoch, Value: 2.4520256519317627\nTag: train/loss, Value: 5.952000141143799\nTag: train/grad_norm, Value: 0.32586005330085754\nTag: train/learning_rate, Value: 2.8731343263643794e-05\nTag: train/epoch, Value: 2.5586354732513428\nTag: train/loss, Value: 5.952499866485596\nTag: train/grad_norm, Value: 0.3140684962272644\nTag: train/learning_rate, Value: 2.784292883006856e-05\nTag: train/epoch, Value: 2.665245294570923\nTag: train/loss, Value: 5.950200080871582\nTag: train/grad_norm, Value: 0.3520500361919403\nTag: train/learning_rate, Value: 2.695451257750392e-05\nTag: train/epoch, Value: 2.771855115890503\nTag: train/loss, Value: 5.950799942016602\nTag: train/grad_norm, Value: 0.37363725900650024\nTag: train/learning_rate, Value: 2.6066098143928684e-05\nTag: train/epoch, Value: 2.878464937210083\nTag: train/loss, Value: 5.951399803161621\nTag: train/grad_norm, Value: 0.3478136360645294\nTag: train/learning_rate, Value: 2.517768371035345e-05\nTag: train/epoch, Value: 2.985074520111084\nTag: eval/loss, Value: 5.94921875\nTag: eval/runtime, Value: 77.23889923095703\nTag: eval/samples_per_second, Value: 25.893999099731445\nTag: eval/steps_per_second, Value: 1.6180000305175781\nTag: train/epoch, Value: 3.0\nTag: train/loss, Value: 5.951000213623047\nTag: train/grad_norm, Value: 0.337437242269516\nTag: train/learning_rate, Value: 2.428926745778881e-05\nTag: train/epoch, Value: 3.091684341430664\nTag: train/loss, Value: 5.9506001472473145\nTag: train/grad_norm, Value: 0.3035908043384552\nTag: train/learning_rate, Value: 2.3400853024213575e-05\nTag: train/epoch, Value: 3.198294162750244\nTag: train/loss, Value: 5.9506001472473145\nTag: train/grad_norm, Value: 0.3659481108188629\nTag: train/learning_rate, Value: 2.251243859063834e-05\nTag: train/epoch, Value: 3.304903984069824\nTag: train/loss, Value: 5.950900077819824\nTag: train/grad_norm, Value: 0.3364345133304596\nTag: train/learning_rate, Value: 2.16240223380737e-05\nTag: train/epoch, Value: 3.4115138053894043\nTag: train/loss, Value: 5.950799942016602\nTag: train/grad_norm, Value: 0.32825613021850586\nTag: train/learning_rate, Value: 2.0735607904498465e-05\nTag: train/epoch, Value: 3.5181236267089844\nTag: train/loss, Value: 5.950399875640869\nTag: train/grad_norm, Value: 0.33717119693756104\nTag: train/learning_rate, Value: 1.984719347092323e-05\nTag: train/epoch, Value: 3.6247334480285645\nTag: train/loss, Value: 5.952199935913086\nTag: train/grad_norm, Value: 0.3382924199104309\nTag: train/learning_rate, Value: 1.895877721835859e-05\nTag: train/epoch, Value: 3.7313432693481445\nTag: train/loss, Value: 5.94920015335083\nTag: train/grad_norm, Value: 0.32053759694099426\nTag: train/learning_rate, Value: 1.8070362784783356e-05\nTag: train/epoch, Value: 3.8379530906677246\nTag: train/loss, Value: 5.951900005340576\nTag: train/grad_norm, Value: 0.3095492422580719\nTag: train/learning_rate, Value: 1.7181946532218717e-05\nTag: train/epoch, Value: 3.9445629119873047\nTag: eval/loss, Value: 5.94921875\nTag: eval/runtime, Value: 77.30380249023438\nTag: eval/samples_per_second, Value: 25.871999740600586\nTag: eval/steps_per_second, Value: 1.6169999837875366\nTag: train/epoch, Value: 4.0\nTag: train/loss, Value: 5.949699878692627\nTag: train/grad_norm, Value: 0.315073698759079\nTag: train/learning_rate, Value: 1.6293532098643482e-05\nTag: train/epoch, Value: 4.051172733306885\nTag: train/loss, Value: 5.951099872589111\nTag: train/grad_norm, Value: 0.347214937210083\nTag: train/learning_rate, Value: 1.5405117665068246e-05\nTag: train/epoch, Value: 4.157782554626465\nTag: train/loss, Value: 5.950399875640869\nTag: train/grad_norm, Value: 0.3128432035446167\nTag: train/learning_rate, Value: 1.451670232199831e-05\nTag: train/epoch, Value: 4.264392375946045\nTag: train/loss, Value: 5.950900077819824\nTag: train/grad_norm, Value: 0.30615678429603577\nTag: train/learning_rate, Value: 1.3628286978928372e-05\nTag: train/epoch, Value: 4.371002197265625\nTag: train/loss, Value: 5.951499938964844\nTag: train/grad_norm, Value: 0.33306533098220825\nTag: train/learning_rate, Value: 1.2739871635858435e-05\nTag: train/epoch, Value: 4.477612018585205\nTag: train/loss, Value: 5.952300071716309\nTag: train/grad_norm, Value: 0.29908332228660583\nTag: train/learning_rate, Value: 1.18514572022832e-05\nTag: train/epoch, Value: 4.584221839904785\nTag: train/loss, Value: 5.951300144195557\nTag: train/grad_norm, Value: 0.31592363119125366\nTag: train/learning_rate, Value: 1.0963041859213263e-05\nTag: train/epoch, Value: 4.690831661224365\nTag: train/loss, Value: 5.9517998695373535\nTag: train/grad_norm, Value: 0.32665854692459106\nTag: train/learning_rate, Value: 1.0074626516143326e-05\nTag: train/epoch, Value: 4.797441482543945\nTag: train/loss, Value: 5.951000213623047\nTag: train/grad_norm, Value: 0.3263249695301056\nTag: train/learning_rate, Value: 9.18621208256809e-06\nTag: train/epoch, Value: 4.904051303863525\nTag: eval/loss, Value: 5.94921875\nTag: eval/runtime, Value: 77.41259765625\nTag: eval/samples_per_second, Value: 25.836000442504883\nTag: eval/steps_per_second, Value: 1.6150000095367432\nTag: train/epoch, Value: 5.0\nTag: train/loss, Value: 5.949900150299072\nTag: train/grad_norm, Value: 0.341155469417572\nTag: train/learning_rate, Value: 8.297796739498153e-06\nTag: train/epoch, Value: 5.0106611251831055\nTag: train/loss, Value: 5.951099872589111\nTag: train/grad_norm, Value: 0.31424975395202637\nTag: train/learning_rate, Value: 7.409381851175567e-06\nTag: train/epoch, Value: 5.1172709465026855\nTag: train/loss, Value: 5.9506001472473145\nTag: train/grad_norm, Value: 0.3193085491657257\nTag: train/learning_rate, Value: 6.52096650810563e-06\nTag: train/epoch, Value: 5.223880767822266\nTag: train/loss, Value: 5.951700210571289\nTag: train/grad_norm, Value: 0.3055357336997986\nTag: train/learning_rate, Value: 5.632551619783044e-06\nTag: train/epoch, Value: 5.330490589141846\nTag: train/loss, Value: 5.951099872589111\nTag: train/grad_norm, Value: 0.3153313100337982\nTag: train/learning_rate, Value: 4.744136276713107e-06\nTag: train/epoch, Value: 5.437100410461426\nTag: train/loss, Value: 5.9506001472473145\nTag: train/grad_norm, Value: 0.30457431077957153\nTag: train/learning_rate, Value: 3.855721388390521e-06\nTag: train/epoch, Value: 5.543710231781006\nTag: train/loss, Value: 5.951600074768066\nTag: train/grad_norm, Value: 0.2942601442337036\nTag: train/learning_rate, Value: 2.967306272694259e-06\nTag: train/epoch, Value: 5.650320053100586\nTag: train/loss, Value: 5.949900150299072\nTag: train/grad_norm, Value: 0.32352960109710693\nTag: train/learning_rate, Value: 2.0788911569979973e-06\nTag: train/epoch, Value: 5.756929874420166\nTag: train/loss, Value: 5.950900077819824\nTag: train/grad_norm, Value: 0.30372756719589233\nTag: train/learning_rate, Value: 1.1904761549885734e-06\nTag: train/epoch, Value: 5.863539218902588\nTag: train/loss, Value: 5.950200080871582\nTag: train/grad_norm, Value: 0.43051785230636597\nTag: train/learning_rate, Value: 3.0206112455744005e-07\nTag: train/epoch, Value: 5.970149040222168\nTag: eval/loss, Value: 5.94921875\nTag: eval/runtime, Value: 77.32530212402344\nTag: eval/samples_per_second, Value: 25.864999771118164\nTag: eval/steps_per_second, Value: 1.6169999837875366\nTag: train/epoch, Value: 6.0\nTag: train/train_runtime, Value: 11344.4462890625\nTag: train/train_samples_per_second, Value: 7.933000087738037\nTag: train/train_steps_per_second, Value: 0.4959999918937683\nTag: train/total_flos, Value: 6.268772344974541e+16\nTag: train/train_loss, Value: 5.932807922363281\nTag: train/epoch, Value: 6.0\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# Load fine-tuned SpanBERT model and tokenizer\nmodel = AutoModelForQuestionAnswering.from_pretrained(\"./spanbert_qa_finetuned\")\ntokenizer = AutoTokenizer.from_pretrained(\"./spanbert_qa_finetuned\")\n\n# Get predictions and evaluate\npredictions, references = get_predictions(model, val_dataset, tokenizer)\n\nem_score = exact_match_score(predictions, references)\nprint(f\"Exact Match (EM) Score: {em_score:.2f}%\")\n\n# Plot training and validation loss\ntrain_loss = trainer.state.log_history\n\ntrain_losses = [log[\"loss\"] for log in train_loss if \"loss\" in log]\nval_losses = [log[\"eval_loss\"] for log in train_loss if \"eval_loss\" in log]\n\nepochs = list(range(1, len(train_losses) + 1))\n\nplt.figure(figsize=(10, 6))\nplt.plot(epochs, train_losses, label=\"Training Loss\", marker=\"o\")\nplt.plot(epochs, val_losses, label=\"Validation Loss\", marker=\"x\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training vs Validation Loss\")\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T18:12:13.842136Z","iopub.execute_input":"2025-03-10T18:12:13.842552Z","iopub.status.idle":"2025-03-10T18:12:14.546325Z","shell.execute_reply.started":"2025-03-10T18:12:13.842512Z","shell.execute_reply":"2025-03-10T18:12:14.545266Z"}},"outputs":[{"name":"stderr","text":"Generating Predictions:   0%|          | 0/125 [00:00<?, ?it/s]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36mconvert_to_tensors\u001b[0;34m(self, tensor_type, prepend_batch_axis)\u001b[0m\n\u001b[1;32m    776\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 777\u001b[0;31m                     \u001b[0mtensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mas_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    778\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36mas_tensor\u001b[0;34m(value, dtype)\u001b[0m\n\u001b[1;32m    738\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 739\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    740\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: too many dimensions 'str'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-0b060840adb4>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Get predictions and evaluate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreferences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_predictions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_dataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mem_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexact_match_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreferences\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-20-9f43ce526b06>\u001b[0m in \u001b[0;36mget_predictions\u001b[0;34m(model, dataset, tokenizer, batch_size)\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreferences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdesc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Generating Predictions\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m             \u001b[0mbatch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"input_ids\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"attention_mask\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tqdm/std.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1179\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1180\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1181\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mobj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1182\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1183\u001b[0m                 \u001b[0;31m# Update and possibly print the progressbar.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    755\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    758\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollate_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/data/data_collator.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, features)\u001b[0m\n\u001b[1;32m    269\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mDict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mDict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 271\u001b[0;31m         batch = pad_without_fast_tokenizer_warning(\n\u001b[0m\u001b[1;32m    272\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenizer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    273\u001b[0m             \u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/data/data_collator.py\u001b[0m in \u001b[0;36mpad_without_fast_tokenizer_warning\u001b[0;34m(tokenizer, *pad_args, **pad_kwargs)\u001b[0m\n\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m         \u001b[0mpadded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mpad_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpad_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0;31m# Restore the state of the warning.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36mpad\u001b[0;34m(self, encoded_inputs, padding, max_length, pad_to_multiple_of, padding_side, return_attention_mask, return_tensors, verbose)\u001b[0m\n\u001b[1;32m   3378\u001b[0m                 \u001b[0mbatch_outputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3380\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mBatchEncoding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_outputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensor_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreturn_tensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3381\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3382\u001b[0m     def create_token_type_ids_from_sequences(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, encoding, tensor_type, prepend_batch_axis, n_sequences)\u001b[0m\n\u001b[1;32m    239\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_sequences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mn_sequences\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 241\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert_to_tensors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensor_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtensor_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprepend_batch_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mprepend_batch_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36mconvert_to_tensors\u001b[0;34m(self, tensor_type, prepend_batch_axis)\u001b[0m\n\u001b[1;32m    791\u001b[0m                         \u001b[0;34m\"Please see if a fast version of this tokenizer is available to have this feature available.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    792\u001b[0m                     ) from e\n\u001b[0;32m--> 793\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m    794\u001b[0m                     \u001b[0;34m\"Unable to create tensor, you should probably activate truncation and/or padding with\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    795\u001b[0m                     \u001b[0;34m\" 'padding=True' 'truncation=True' to have batched tensors with the same length. Perhaps your\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' 'truncation=True' to have batched tensors with the same length. Perhaps your features (`id` in this case) have excessive nesting (inputs type `list` where type `int` is expected)."],"ename":"ValueError","evalue":"Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' 'truncation=True' to have batched tensors with the same length. Perhaps your features (`id` in this case) have excessive nesting (inputs type `list` where type `int` is expected).","output_type":"error"}],"execution_count":21},{"cell_type":"code","source":"!zip -r working_backup.zip /kaggle/working\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T19:00:27.038999Z","iopub.execute_input":"2025-03-10T19:00:27.039325Z","iopub.status.idle":"2025-03-10T19:08:12.120129Z","shell.execute_reply.started":"2025-03-10T19:00:27.039296Z","shell.execute_reply":"2025-03-10T19:08:12.119202Z"}},"outputs":[{"name":"stdout","text":"  adding: kaggle/working/ (stored 0%)\n  adding: kaggle/working/logs/ (stored 0%)\n  adding: kaggle/working/logs/events.out.tfevents.1741606418.0a61df013961.31.0 (deflated 61%)\n  adding: kaggle/working/logs/events.out.tfevents.1741615917.0a61df013961.31.1 (deflated 65%)\n  adding: kaggle/working/results/ (stored 0%)\n  adding: kaggle/working/results/checkpoint-4690/ (stored 0%)\n  adding: kaggle/working/results/checkpoint-4690/tokenizer.json (deflated 70%)\n  adding: kaggle/working/results/checkpoint-4690/special_tokens_map.json (deflated 42%)\n  adding: kaggle/working/results/checkpoint-4690/config.json (deflated 47%)\n  adding: kaggle/working/results/checkpoint-4690/trainer_state.json (deflated 76%)\n  adding: kaggle/working/results/checkpoint-4690/optimizer.pt (deflated 33%)\n  adding: kaggle/working/results/checkpoint-4690/scheduler.pt (deflated 55%)\n  adding: kaggle/working/results/checkpoint-4690/model.safetensors (deflated 8%)\n  adding: kaggle/working/results/checkpoint-4690/training_args.bin (deflated 51%)\n  adding: kaggle/working/results/checkpoint-4690/tokenizer_config.json (deflated 74%)\n  adding: kaggle/working/results/checkpoint-4690/vocab.txt (deflated 49%)\n  adding: kaggle/working/results/checkpoint-4690/rng_state.pth (deflated 25%)\n  adding: kaggle/working/results/checkpoint-5628/ (stored 0%)\n  adding: kaggle/working/results/checkpoint-5628/tokenizer.json (deflated 70%)\n  adding: kaggle/working/results/checkpoint-5628/special_tokens_map.json (deflated 42%)\n  adding: kaggle/working/results/checkpoint-5628/config.json (deflated 47%)\n  adding: kaggle/working/results/checkpoint-5628/trainer_state.json (deflated 77%)\n  adding: kaggle/working/results/checkpoint-5628/optimizer.pt (deflated 32%)\n  adding: kaggle/working/results/checkpoint-5628/scheduler.pt (deflated 55%)\n  adding: kaggle/working/results/checkpoint-5628/model.safetensors (deflated 8%)\n  adding: kaggle/working/results/checkpoint-5628/training_args.bin (deflated 51%)\n  adding: kaggle/working/results/checkpoint-5628/tokenizer_config.json (deflated 74%)\n  adding: kaggle/working/results/checkpoint-5628/vocab.txt (deflated 49%)\n  adding: kaggle/working/results/checkpoint-5628/rng_state.pth (deflated 25%)\n  adding: kaggle/working/.virtual_documents/ (stored 0%)\n  adding: kaggle/working/spanbert_qa_finetuned/ (stored 0%)\n  adding: kaggle/working/spanbert_qa_finetuned/tokenizer.json (deflated 70%)\n  adding: kaggle/working/spanbert_qa_finetuned/special_tokens_map.json (deflated 42%)\n  adding: kaggle/working/spanbert_qa_finetuned/config.json (deflated 47%)\n  adding: kaggle/working/spanbert_qa_finetuned/model.safetensors (deflated 8%)\n  adding: kaggle/working/spanbert_qa_finetuned/tokenizer_config.json (deflated 74%)\n  adding: kaggle/working/spanbert_qa_finetuned/vocab.txt (deflated 49%)\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T18:58:05.312391Z","iopub.execute_input":"2025-03-10T18:58:05.312719Z","iopub.status.idle":"2025-03-10T18:58:05.525055Z","shell.execute_reply.started":"2025-03-10T18:58:05.312683Z","shell.execute_reply":"2025-03-10T18:58:05.524052Z"}},"outputs":[{"name":"stdout","text":"mv: cannot stat 'working_backup.zip': No such file or directory\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"from IPython.display import FileLink\n\nFileLink(\"/kaggle/working/working_backup.zip\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T19:08:12.121628Z","iopub.execute_input":"2025-03-10T19:08:12.121916Z","iopub.status.idle":"2025-03-10T19:08:12.127352Z","shell.execute_reply.started":"2025-03-10T19:08:12.121891Z","shell.execute_reply":"2025-03-10T19:08:12.126761Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"/kaggle/working/working_backup.zip","text/html":"<a href='/kaggle/working/working_backup.zip' target='_blank'>/kaggle/working/working_backup.zip</a><br>"},"metadata":{}}],"execution_count":30}]}